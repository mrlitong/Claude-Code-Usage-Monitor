 name: Release

 on:
   push:
     branches: [main]
   workflow_dispatch:

 jobs:
   check-version:
     runs-on: ubuntu-latest
     outputs:
       should_release: ${{ steps.check.outputs.should_release }}
       version: ${{ steps.extract.outputs.version }}
     steps:
       - uses: actions/checkout@v4
         with:
           fetch-depth: 0

       - name: Extract version from pyproject.toml
         id: extract
         run: |
           VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
           echo "version=$VERSION" >> $GITHUB_OUTPUT
           echo "Version: $VERSION"

       - name: Check if tag exists
         id: check
         run: |
           VERSION="${{ steps.extract.outputs.version }}"
           if git rev-parse "v$VERSION" >/dev/null 2>&1; then
             echo "Tag v$VERSION already exists"
             echo "should_release=false" >> $GITHUB_OUTPUT
           else
             echo "Tag v$VERSION does not exist"
             echo "should_release=true" >> $GITHUB_OUTPUT
           fi

   release:
     needs: check-version
     if: needs.check-version.outputs.should_release == 'true'
     runs-on: ubuntu-latest
     permissions:
       contents: write
       id-token: write  # For trusted PyPI publishing
     steps:
       - uses: actions/checkout@v4
         with:
           fetch-depth: 0

       - name: Install uv
         uses: astral-sh/setup-uv@v4
         with:
           version: "latest"

       - name: Set up Python
         run: uv python install

       - name: Extract changelog for version
         id: changelog
         run: |
           VERSION="${{ needs.check-version.outputs.version }}"
           echo "Extracting changelog for version $VERSION"

           # Extract the changelog section for this version using sed
           sed -n "/^## \\[$VERSION\\]/,/^## \\[/{/^## \\[$VERSION\\]/d; /^## \\[/q; /^$/d; p}" CHANGELOG.md > release_notes.md

           # If no changelog found, create a simple message
           if [ ! -s release_notes.md ]; then
             echo "No specific changelog found for version $VERSION" > release_notes.md
           fi

           echo "Release notes:"
           cat release_notes.md

       - name: Create git tag
         run: |
           VERSION="${{ needs.check-version.outputs.version }}"
           git config user.name "maciekdymarczyk"
           git config user.email "maciek@roboblog.eu"
           git tag -a "v$VERSION" -m "Release v$VERSION"
           git push origin "v$VERSION"

       - name: Create GitHub Release
         uses: softprops/action-gh-release@v2
         with:
           tag_name: v${{ needs.check-version.outputs.version }}
           name: Release v${{ needs.check-version.outputs.version }}
           body_path: release_notes.md
           draft: false
           prerelease: false

       - name: Build package
         run: |
           uv build
           ls -la dist/

       - name: Publish to PyPI
         uses: pypa/gh-action-pypi-publish@release/v1
         with:
           skip-existing: true

   notify-success:
     needs: [check-version, release]
     if: needs.check-version.outputs.should_release == 'true' && success()
     runs-on: ubuntu-latest
     steps:
       - name: Success notification
         run: |
           echo "ðŸŽ‰ Successfully released v${{ needs.check-version.outputs.version }}!"
           echo "- GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.check-version.outputs.version }}"
           echo "- PyPI: https://pypi.org/project/claude-monitor/${{ needs.check-version.outputs.version }}/"
